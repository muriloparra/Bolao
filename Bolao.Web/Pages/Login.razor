
@page "/login"
@using Microsoft.AspNetCore.Components.Forms
@using Bolao.Web.Models
@using Bolao.Web.Services
@inject AuthService AuthService
@inject NavigationManager Navigation

<PageTitle>Login</PageTitle>

<div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <div class="text-center">
            <h2 class="mt-6 text-3xl font-extrabold text-gray-900">
                Fa√ßa login em sua conta
            </h2>
        </div>
        
        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" class="mt-8 space-y-6">
            <DataAnnotationsValidator />
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                    @errorMessage
                </div>
            }
            
            <div class="space-y-4">
                <div>
                    <label for="email" class="block text-sm font-medium text-gray-700">E-mail</label>
                    <InputText id="email" @bind-Value="loginModel.Email" 
                               class="mt-1 appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                               placeholder="Digite seu e-mail" />
                    <ValidationMessage For="@(() => loginModel.Email)" class="text-red-500 text-sm mt-1" />
                </div>
                
                <div>
                    <label for="password" class="block text-sm font-medium text-gray-700">Senha</label>
                    <InputText id="password" type="password" @bind-Value="loginModel.Password"
                               class="mt-1 appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                               placeholder="Digite sua senha" />
                    <ValidationMessage For="@(() => loginModel.Password)" class="text-red-500 text-sm mt-1" />
                </div>
            </div>
            
            <div>
                <button type="submit" disabled="@isLoading"
                        class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50">
                    @if (isLoading)
                    {
                        <span>Entrando...</span>
                    }
                    else
                    {
                        <span>Entrar</span>
                    }
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private LoginRequest loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await AuthService.InitializeAsync();
        
        if (AuthService.IsAuthenticated)
        {
            Navigation.NavigateTo("/dashboard");
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        
        try
        {
            var (success, message) = await AuthService.LoginAsync(loginModel);
            
            if (success)
            {
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro inesperado: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
